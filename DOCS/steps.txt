>python -m venv VirtualEnv  

VirtualEnv\Scripts\activate

pymongo = to connect python project to mongodb

python-dotenv = to store pass credentials etc

gunicorn library - production server for python

# dbs = client.list_database_names()
# print(dbs)
# test_db = client.ProjectJobManch



# def insert_job_data():
#     collection = test_db.Jobdata
#     test_document = {
#         "name" : "first"
#     }

#     inserted_id = collection.insert_one(test_document)
#     print(inserted_id)

# insert_job_data()


DEPLOYING ON RENDER.COM
click on new
    choose web service from dropdown

select Build and deploy from a Git repository
    click next

now on the page of create new web service
    on the right side click on configure account below the Github option

Under Repository access
    click on select repository to add repo of your project
    click save

Now you can see your project repo  name under connect a repository
    click on connect button corresponding to your project repo

Now configure all the rquired options like name, region etc

IMPORTANT
    Build Command
        create requirements.txt if not already as the libraries written inside this txt file will be installed if youre try to run or clone your project on a different machine or even when installed
        being deployed in the cloud.
         - > $pip install -r requirements.txt

    Start Command
        the name of the file of your project which is main.py in this case and,
        name of the variable that contains the flask application that we want to run.
         - > $gunicorn app:app



how to protect flask routes from direct access
Copilot
To protect Flask routes from direct access, you can implement various strategies to enhance security and control access. Here are some common approaches:

Authentication and Authorization:
Implement authentication checks on sensitive routes. This ensures that only authenticated users can access certain parts of your application.
Use Flask extensions like Flask-Login or Flask-Security to manage user sessions and roles.
Example:
Python

from flask_login import login_required

@app.route('/dashboard')
@login_required
def dashboard():
    return 'Secure Dashboard'
AI-generated code. Review and use carefully. More info on FAQ.
CSRF Protection:
Protect routes that handle sensitive operations (e.g., form submissions) with CSRF tokens.
Use Flask-WTF extension to generate and validate CSRF tokens.
Example:
Python

from flask_wtf import CSRFProtect

csrf = CSRFProtect(app)
AI-generated code. Review and use carefully. More info on FAQ.
Basic Authentication:
Use basic authentication to secure specific routes.
Define a decorator that verifies the password.
Example:
Python

from flask_httpauth import HTTPBasicAuth

auth = HTTPBasicAuth()

@auth.verify_password
def verify_password(username, password):
    # Validate credentials (e.g., check against a database)
    return True  # Return True if valid, else False
AI-generated code. Review and use carefully. More info on FAQ.
Custom Decorators:
Create custom decorators to protect routes based on specific conditions.
Example:
Python

from functools import wraps

def custom_auth_required(f):
    @wraps(f)
    def decorated_function(*args, **kwargs):
        if not is_authenticated():
            return redirect(url_for('login'))
        return f(*args, **kwargs)
    return decorated_function

@app.route('/admin')
@custom_auth_required
def admin_dashboard():
    return 'Admin Dashboard'
AI-generated code. Review and use carefully. More info on FAQ.
Route Guards in JavaScript:
Use JavaScript to prevent direct access to specific routes on the client side.
For example, check if the user is authenticated before allowing access to certain pages.
Remember that security is a multi-layered approach. Combine these techniques based on your applicationâ€™s requirements. Additionally, consider using HTTPS, input validation, and other security best practices to further protect your Flask routes. ðŸš€ðŸ”’



You
flask_login could not be resolved

Copilot
The issue youâ€™re encountering with flask_login not being resolved could be due to a few reasons. Letâ€™s troubleshoot and resolve it:

Installation and Compatibility:
Make sure you have installed Flask-Login using the correct Python version.
If youâ€™re using Python 3, use pip3 to install compatible packages.
Try the following commands:
sudo apt install python3-pip  # Install pip3 if not already installed
pip3 install flask-login

Upgrade Pip:
Sometimes upgrading pip can resolve compatibility issues.
Run the following command to upgrade pip:
python -m pip install --upgrade pip

Check Installed Packages:
Verify that flask-login is installed by running pip list in your project directory terminal.
If itâ€™s not listed, install it again using pip3 install flask-login.
Typo Mistakes:
Double-check for any typos in your code (e.g., incorrect import statements).
Share the relevant piece of code if you need further assistance.


